service: translation-bot
frameworkVersion: '3'

provider:
  name: aws
  runtime: ruby3.2
  memorySize: 256
  httpApi:
    cors: false
    authorizers:
      telegramWebhookAuthorizer:
        type: request
        functionName: TelegramWebhookAuthorizer
        identitySource:
          - $request.header.x-telegram-bot-api-secret-token
        payloadVersion: "2.0"
        enableSimpleResponses: true
  logs:
    httpApi:
      format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength", "authorizerError": "$context.authorizer.error" }'
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'states:StartExecution'
          Resource:
            Fn::Join:
              - ''
              - - 'arn:aws:states:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':lambda:Translate'

package:
  individually: true
  patterns:
    - "!node_modules/**"
    - "!spec/**"
    - "!*"
    - config.yml
    - lib/*.rb

functions:
  TelegramWebhookAuthorizer:
    handler: telegram_webhook_authorizer.authorize
    package:
      patterns:
        - telegram_webhook_authorizer.rb
  IngestTelegramWebhook:
    handler: ingest_telegram_webhook.handle
    package:
      patterns:
        - ingest_telegram_webhook.rb
    environment:
      STAGE: ${sls:stage}
    events:
      - httpApi:
          path: /handle-message
          method: POST
          authorizer:
            name: telegramWebhookAuthorizer
  Translate:
    handler: translate.handle
    timeout: 15
    package:
      patterns:
        - translate.rb
